{"ast":null,"code":"var _jsxFileName = \"/Users/joeykraus/Desktop/Mern/client/src/components/profile/ProfileGitHub.js\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getGithubRepos } from '../../actions/profile';\n\nconst ProfileGitHub = ({\n  usernmae,\n  getGithubRepos,\n  repos\n}) => {\n  useEffect(() => {\n    getGithubRepos(usernmae);\n  }, [getGithubRepos]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile-github\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-primary my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, \"Github Repos\"), repos === null ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 31\n    }\n  }) : repos.map(repo => /*#__PURE__*/React.createElement(\"div\", {\n    key: repo.id,\n    className: \"repo bg-white p-1 my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: repo.html_url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 29\n    }\n  }, repo.name)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 25\n    }\n  }, repo.description)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 29\n    }\n  }, \"Stars: \", repo.stargazers_count), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 29\n    }\n  }, \"Watchers: \", repo.watchers_count), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }\n  }, \"Forks: \", repo.forks_count))))));\n};\n\nProfileGitHub.propTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, {\n  getGithubRepos\n})(ProfileGitHub);","map":{"version":3,"sources":["/Users/joeykraus/Desktop/Mern/client/src/components/profile/ProfileGitHub.js"],"names":["React","useEffect","PropTypes","connect","Spinner","getGithubRepos","ProfileGitHub","usernmae","repos","map","repo","id","html_url","name","description","stargazers_count","watchers_count","forks_count","propTypes","func","isRequired","array","username","string","mapStateToProps","state","profile"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAAQC,cAAR,QAA6B,uBAA7B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAUF,EAAAA,cAAV;AAAyBG,EAAAA;AAAzB,CAAD,KAAqC;AAE3DP,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,cAAc,CAACE,QAAD,CAAd;AACH,GAFQ,EAEN,CAACF,cAAD,CAFM,CAAT;AAII,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAIKG,KAAK,KAAK,IAAV,gBAAiB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjB,GACDA,KAAK,CAACC,GAAN,CAAUC,IAAI,iBACV;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAf;AAAmB,IAAA,SAAS,EAAC,wBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,IAAI,EAAED,IAAI,CAACE,QAAd;AAAwB,IAAA,MAAM,EAAC,QAA/B;AAAwC,IAAA,GAAG,EAAC,qBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,IAAI,CAACG,IADV,CADJ,CADJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIH,IAAI,CAACI,WAAT,CANJ,CADJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACYJ,IAAI,CAACK,gBADjB,CADJ,eAII;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACeL,IAAI,CAACM,cADpB,CAJJ,eAOI;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACYN,IAAI,CAACO,WADjB,CAPJ,CADJ,CATJ,CADJ,CALJ,CADJ;AAiCH,CAvCD;;AAyCAX,aAAa,CAACY,SAAd,GAA0B;AAC1Bb,EAAAA,cAAc,EAAEH,SAAS,CAACiB,IAAV,CAAeC,UADL;AAE1BZ,EAAAA,KAAK,EAAEN,SAAS,CAACmB,KAAV,CAAgBD,UAFG;AAG1BE,EAAAA,QAAQ,EAAEpB,SAAS,CAACqB,MAAV,CAAiBH;AAHD,CAA1B;;AAKA,MAAMI,eAAe,GAAGC,KAAK,KAAI;AACjCjB,EAAAA,KAAK,EAAEiB,KAAK,CAACC,OAAN,CAAclB;AADY,CAAJ,CAA7B;;AAIA,eAAeL,OAAO,CAACqB,eAAD,EAAiB;AAACnB,EAAAA;AAAD,CAAjB,CAAP,CAA0CC,aAA1C,CAAf","sourcesContent":["import React,{useEffect} from 'react'\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport {getGithubRepos} from '../../actions/profile';\n\nconst ProfileGitHub = ({usernmae,getGithubRepos,repos}) => {\n\nuseEffect(() => {\n    getGithubRepos(usernmae);\n}, [getGithubRepos]);\n\n    return (\n        <div className='profile-github'>\n            <h2 className=\"text-primary my-1\">\n                Github Repos\n            </h2>\n            {repos === null ? <Spinner/> : \n            repos.map(repo => (\n                <div key={repo.id} className='repo bg-white p-1 my-1'>\n                    <div>\n                        <h4>\n                            <a href={repo.html_url} target='_blank' rel='noopener noreferrer'>\n                                {repo.name}\n                            </a>\n                        </h4>\n                        <p>{repo.description}</p>\n                    </div>\n                    <div>\n                        <ul>\n                            <li className='badge badge-primary'>\n                                Stars: {repo.stargazers_count}\n                            </li>\n                            <li className='badge badge-dark'>\n                                Watchers: {repo.watchers_count}\n                            </li>\n                            <li className='badge badge-light'>\n                                Forks: {repo.forks_count}\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nProfileGitHub.propTypes = {\ngetGithubRepos: PropTypes.func.isRequired,\nrepos: PropTypes.array.isRequired,\nusername: PropTypes.string.isRequired,\n}\nconst mapStateToProps = state =>({\nrepos: state.profile.repos\n})\n\nexport default connect(mapStateToProps,{getGithubRepos})(ProfileGitHub)\n"]},"metadata":{},"sourceType":"module"}