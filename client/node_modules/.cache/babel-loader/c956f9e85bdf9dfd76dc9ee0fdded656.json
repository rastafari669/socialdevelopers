{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOG_OUT, CLEAR_PROFILE } from './types';\nimport setAuthToken from '../utils/setAuthToken'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //Logout/ Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOG_OUT\n  });\n};","map":{"version":3,"sources":["/Users/joeykraus/Desktop/Mern/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOG_OUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {setAlert} from './alert'\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOG_OUT,\n    CLEAR_PROFILE\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n//Load User\nexport const loadUser = () => async dispatch =>{\nif (localStorage.token) {\n    setAuthToken(localStorage.token)\n}\n\ntry {\n   const res = await axios.get('/api/auth');\n   dispatch({\n       type: USER_LOADED,\n       payload: res.data\n   });\n} catch (err) {\n    dispatch({\n        type:AUTH_ERROR\n    })\n}\n}\n//Register User\nexport const register = ({name,email,password}) => async dispatch =>{\n const config ={\n     headers:{\n         'Content-Type': 'application/json'\n     }\n }\n\n const body = JSON.stringify({name,email,password});\n\n try {\n     const res = await axios.post('/api/users',body,config);\n\n     dispatch({\n         type: REGISTER_SUCCESS,\n         payload: res.data\n     });\n     dispatch(loadUser());\n } catch (err) {\n     const errors = err.response.data.errors;\n     if (errors) {\n         errors.forEach(error => dispatch(setAlert(error.msg,'danger')));\n     }\n     dispatch({\n         type: REGISTER_FAIL\n     })\n }\n}\n\n//Login User\nexport const login = (email,password) => async dispatch =>{\n    const config ={\n        headers:{\n            'Content-Type': 'application/json'\n        }\n    }\n   \n    const body = JSON.stringify({email,password});\n   \n    try {\n        const res = await axios.post('/api/auth',body,config);\n   \n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(loadUser());\n    } catch (err) {\n        const errors = err.response.data.errors;\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg,'danger')));\n        }\n        dispatch({\n            type: LOGIN_FAIL\n        })\n    }\n   };\n\n\n\n   //Logout/ Clear Profile\n   export const logout = () => dispatch =>{\n    dispatch({\n        type: CLEAR_PROFILE\n    });\n       dispatch({\n           type:LOG_OUT\n       });\n      \n   }\n"]},"metadata":{},"sourceType":"module"}